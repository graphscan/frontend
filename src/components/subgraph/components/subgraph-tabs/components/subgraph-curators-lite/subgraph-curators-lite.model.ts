import { ColumnType } from 'antd/es/table';
import { divideBy1e18 } from '../../../../../../utils/number.utils';
import {
  renderAccountId,
  createTitleWithTooltipDescription,
  renderFormattedValue,
  renderDate,
  formatTableDate,
} from '../../../../../../utils/table.utils';

type BaseSignal = {
  id: string;
  curator: {
    id: string;
  };
  signalledTokens: string;
  unsignalledTokens: string;
};

export type NameSignalLite = BaseSignal & {
  nameSignal: string;
  lastNameSignalChange: number;
};

export type SignalLite = BaseSignal & {
  signal: string;
  lastSignalChange: number;
};

export type SubgraphCuratorsRowLite = {
  id: string;
  key: string;
  curator: string;
  shares: number;
  signalledTokens: number;
  unsignalledTokens: number;
  lastChange: number;
  type: 'Auto-Migrate' | 'Deployment Signal';
};

const titles: Record<Exclude<keyof SubgraphCuratorsRowLite, 'id' | 'key'>, string> = {
  curator: 'Curator ID',
  type: 'Signal Type',
  shares: 'Shares',
  signalledTokens: 'Signaled',
  unsignalledTokens: 'Unsignaled',
  lastChange: 'Last Activity',
};

export const columnsWidth = {
  '2560': [193, 210, 206, 206, 206, 220],
  '1920': [174, 182, 132, 132, 132, 202],
  '1440': [154, 162, 120, 120, 120, 180],
  '1280': [136, 140, 108, 108, 108, 152],
};

export const columns: Array<ColumnType<SubgraphCuratorsRowLite>> = [
  {
    title: createTitleWithTooltipDescription(titles.curator),
    dataIndex: 'curator',
    key: 'curator',
    align: 'center',
    render: renderAccountId('curator-details'),
  },
  {
    title: createTitleWithTooltipDescription(titles.type),
    dataIndex: 'type',
    key: 'type',
    align: 'center',
  },
  {
    title: createTitleWithTooltipDescription(
      titles.shares,
      `
        Shares are minted by depositing ("signaling") GRT into a subgraph's bonding curve and entitle the 
        holder to a share of the Curator commision on future query fees generated by the subgraph.
      `,
    ),
    dataIndex: 'shares',
    key: 'shares',
    render: renderFormattedValue,
  },
  {
    title: createTitleWithTooltipDescription(
      titles.signalledTokens,
      'All-time amount of GRT spent on signaling to this subgraph.',
    ),
    dataIndex: 'signalledTokens',
    key: 'signalledTokens',
    render: renderFormattedValue,
  },
  {
    title: createTitleWithTooltipDescription(
      titles.unsignalledTokens,
      'All-time amount of GRT received from unsignaling from this subgraph.',
    ),
    dataIndex: 'unsignalledTokens',
    key: 'unsignalledTokens',
    render: renderFormattedValue,
  },
  {
    title: createTitleWithTooltipDescription(titles.lastChange),
    dataIndex: 'lastChange',
    key: 'lastChange',
    align: 'center',
    render: renderDate,
  },
];

type TypedNameSignalLite = {
  type: 'Auto-Migrate';
} & NameSignalLite;

type TypedSignalLite = {
  type: 'Deployment Signal';
} & SignalLite;

export const transformToRow = (
  typedSignal: TypedNameSignalLite | TypedSignalLite,
): SubgraphCuratorsRowLite => {
  const {
    id,
    curator: { id: curatorId },
    signalledTokens,
    unsignalledTokens,
    type,
  } = typedSignal;

  const baseSignal = {
    id,
    key: id,
    curator: curatorId,
    signalledTokens: divideBy1e18(signalledTokens),
    unsignalledTokens: divideBy1e18(unsignalledTokens),
    type,
  };

  return typedSignal.type === 'Auto-Migrate'
    ? {
        ...baseSignal,
        shares: divideBy1e18(typedSignal.nameSignal),
        lastChange: typedSignal.lastNameSignalChange,
      }
    : {
        ...baseSignal,
        shares: divideBy1e18(typedSignal.signal),
        lastChange: typedSignal.lastSignalChange,
      };
};

export const transformToCsvRow = ({
  curator,
  shares,
  signalledTokens,
  unsignalledTokens,
  lastChange,
  type,
}: SubgraphCuratorsRowLite) => ({
  [titles.curator]: type,
  [titles.type]: curator,
  [titles.shares]: shares,
  [titles.signalledTokens]: signalledTokens,
  [titles.unsignalledTokens]: unsignalledTokens,
  [titles.lastChange]: lastChange ? formatTableDate(lastChange) : null,
});
